if test -n $CHEF_HOME;
    set CHEF_HOME $HOME/.prezi/prezi-chef
end

function ssh_debug
    if test  -n "$SSH_DEBUG";
       echo $argv
    end
end

function find_roles
    set regex $argv[1]
    set candidates (ls $CHEF_HOME/roles | sed 's/\.json$//' | grep -E "$regex")
    # If we have an exact match, use it
    for candidate in $candidates
        if [ "$regex" = "$candidate" ]
            echo $candidate
            return
        end
    end
    # Otherwise return all the candidates
    for candidate in $candidates
        echo $candidate
    end
end

function ec2_ssh
    set id $argv[1]
    set ec2host (ec2-describe-instances --show-empty-fields $id | grep '^INSTANCE' | cut -f4)
    ssh_debug "Logging in to EC2 instance $id. Host: $ec2host. Extra args: $extra_args"
    set argv[1] $ec2host
    ssh $argv
end

function chef_ssh
    set role_regex $argv[1]
    set role (find_roles "$role_regex")
    if [ (count $role) -eq 0 ];
        echo "No idea how to SSH into $role_regex"
    else if [ (count $role) -ne 1 ];
        echo "Found more than one matching Chef role:"
        echo $role
    else
        ssh_debug "Logging in to nodes with Chef role $role"
        cd $CHEF_HOME
        knife ssh roles:$role cssh -x root
    end
end

function s
    set id (echo "$argv[1]" | grep -o 'i-[0-9a-f]\{8\}')
    if [ $status -eq 0 ];
        ssh_debug "First argument looks like an EC2 instance id ($argv[1] -> $id)"
        set argv[1] $id
        ec2_ssh $argv
    else if timeout 2 host "$argv[1]" > /dev/null;
        ssh_debug "First argument doesn't look like an EC2 instance id, but I can resolve it as a hostname. Logging in directly."
        ssh $argv
    else
        ssh_debug "First argument doesn't look like an EC2 instance id, I can't resolve it as a hostname, assuming it's a Chef role (maybe a regex)"
        chef_ssh $argv
    end
end

function list_tail
    # edge-case: when an item contains new-line, it becomes several items
    if test (count $argv) -gt 1
        for x in $argv[2..-1]
            echo "$x"
        end
    end
end

function sr
    s $argv[1] -l root (list_tail $argv)
end

function sp
    s $argv[1] -l publisher (list_tail $argv)
end

function sm
    set cmd $argv[1]
    for h in $argv[2..-1]
        echo $cmd on $h | tee $h.out
        sr_tee.fish "$h" "$cmd"
    end
end

function smp
    set cmd $argv[1]
    for h in $argv[2..-1]
        echo $cmd on $h | tee $h.out
        sr_tee.fish "$h" "$cmd" &
    end
    for pid in %sr_tee.fish
        while kill -0 $pid ^ /dev/null
            sleep 1
        end
    end
end
